using BijinAIOPathcer.Patchers;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals.Implementations;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using System.Collections.Generic;

namespace BijinAIOPathcer
{
    public class Program
    {
        public static Lazy<Settings.Settings> settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out settings)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {

            var sourcePluginName = "Bijin AIO.esp";
            var sourceModKey = ModKey.FromNameAndExtension(sourcePluginName);
            Constants.BasePath = state.DataFolderPath + "\\meshes\\";

            if (settings.Value.HighPolyHeadOutput.Equals("") && settings.Value.UseYourSkin)
            {
                throw new ArgumentException("When enabled \"Use Your Skin\". You must specify a High Poly Head Output path to export");
            }
            if (state.LoadOrder.TryGetValue(sourceModKey) is not { Mod: not null } sourceMod)
            {
                throw new ArgumentException($"Could not find{sourcePluginName}. Make sure Bijin Fixes (AIO or Separate) is installed.");
            }
            NpcPatcher.Apply(state, sourceMod.Mod);
            HeadPartPatcher.Apply(state, sourceMod.Mod);
            BodyMeshPatcher.Apply(state, sourceMod.Mod);
            TextureSetPatcher.Apply(state, sourceMod.Mod);
        }
    }
}
